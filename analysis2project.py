# -*- coding: utf-8 -*-
"""Analysis2project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BQo_q3yMDxwkuCrPxtgVE1mtvI3TgwTA
"""

#this  is an application for data analyise project it's about classifing and we will use 2 types
# of classification the random classfier and the naive bayse classifier
# the data are used is Naive Bayes Classifier
#Objective: Build a Naive Bayes classifier to predict a target variable.

# import libraries and dataset
import numpy as np
import pandas as pd
import statistics
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from google.colab import drive
drive.mount('/content/drive')
# transform it into dataframe
df=pd.read_csv('/content/drive/MyDrive/diabetes.csv')

## observing the shape of the data
print(df.shape)
df.head()

## gives information about the data types,columns, null value counts, memory usage etc
## function reference : https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.info.html
df.info(verbose=True)
df.describe()

# Calculate the max, min, and mean for each column
max_values = df.max()
min_values = df.min()

# Create a new DataFrame to show the ranges (max - min) for each feature
ranges = max_values - min_values

# Create a formatted DataFrame to show "max - min" for each feature
range_df = pd.DataFrame({
    'Feature': df.columns,
    'Range': [f"{min_values[col]} - {max_values[col]}" for col in df.columns]
})

# Display the result
print(range_df)

df_copy = df.copy(deep = True)
df_copy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = df_copy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)
## showing the count of Nans
print(df_copy.isnull().sum())

df_copy['Glucose'].fillna(df_copy['Glucose'].mean(), inplace = True)
df_copy['BloodPressure'].fillna(df_copy['BloodPressure'].mean(), inplace = True)
df_copy['SkinThickness'].fillna(df_copy['SkinThickness'].median(), inplace = True)
df_copy['Insulin'].fillna(df_copy['Insulin'].median(), inplace = True)
df_copy['BMI'].fillna(df_copy['BMI'].median(), inplace = True)
#  Histogram for each feature
# List of colors for the histograms
colors = ['#FF6F61', '#6B5B95', '#88B04B', '#F7CAC9', '#92A8D1', '#955251', '#B565A7', '#009B77']

# 1. Colorful Histogram for each feature

# Iterate through columns and apply color
num_cols = 8  # Get the number of columns to plot
fig, axes = plt.subplots(nrows=int(num_cols/3)+1, ncols=3, figsize=(20,20)) # Create subplots to fit all histograms
fig.tight_layout(pad=3.0)
axes = axes.ravel()

for i, col in enumerate(df_copy.columns):
  df_copy[col].hist(ax=axes[i], color=colors[i % len(colors)], grid=False, edgecolor='black') # Plot each column with a different color
  axes[i].set_title(col)
# Add a title to the whole figure
plt.suptitle('Histogram for Each Feature', fontsize=16)

# Show the plot
plt.show()

# Correlation Heatmap
plt.figure(figsize=(10, 6))
correlation_matrix = df_copy.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

# Scatter plot: Glucose vs BMI
plt.subplot(1, 2, 1)
sns.scatterplot(data=df, x='Glucose', y='BMI', color='orange')
plt.title('Scatter Plot: Glucose vs BMI')
plt.xlabel('Glucose Level')
plt.ylabel('BMI')

# Scatter plot: Age vs Insulin
plt.subplot(1, 2, 2)
sns.scatterplot(data=df, x='Age', y='Insulin', color='purple')
plt.title('Scatter Plot: Age vs Insulin')
plt.xlabel('Age')
plt.ylabel('Insulin Level')

plt.tight_layout()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
# Create a box plot
sns.boxplot(x='Pregnancies', y='Outcome', data=df)

# Add title
plt.title('Box Plot using Seaborn')

# Show the plot
plt.show()

#  Histogram for each feature
# List of colors for the histograms
colors = ['#FF6F61', '#6B5B95', '#88B04B', '#F7CAC9', '#92A8D1', '#955251', '#B565A7', '#009B77']

# 1. Colorful Histogram for each feature

# Iterate through columns and apply color
num_cols = 8  # Get the number of columns to plot
fig, axes = plt.subplots(nrows=int(num_cols/3)+1, ncols=3, figsize=(15, 15)) # Create subplots to fit all histograms
fig.tight_layout(pad=3.0)
axes = axes.ravel()

for i, col in enumerate(df.columns):
  df[col].hist(ax=axes[i], color=colors[i % len(colors)], grid=False, edgecolor='black') # Plot each column with a different color
  axes[i].set_title(col)
# Add a title to the whole figure
plt.suptitle('Histogram for Each Feature', fontsize=16)

# Show the plot
plt.show()

## checking the balance of the data by plotting the count of outcomes by their value
color_wheel = {1: "#0392cf",
               2: "#7bc043"}
colors = df["Outcome"].map(lambda x: color_wheel.get(x + 1))
print(df.Outcome.value_counts())
p=df.Outcome.value_counts().plot(kind="bar")

X = df_copy.iloc[:, :-1]
y = df_copy.iloc[:, -1]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
# instantiate the classifier
rfc = RandomForestClassifier(random_state=0)
rfc.fit(X_train, y_train)
# Print the results
print (f"accuracy {rfc.score(X_test, y_test)* 100:.2f}%\n :")
#let us get the predictions using the classifier we had fit above
y_pred = rfc.predict(X_test)
cnf_matrix = confusion_matrix(y_test, y_pred)
p = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap="YlGnBu" ,fmt='g')
plt.title('Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')

# instantiate the classifier
gnb = GaussianNB()
gnb.fit(X_train, y_train)
print (f"accuracy {gnb.score(X_test, y_test)* 100:.2f}%\n :")
#let us get the predictions using the classifier we had fit above
y_pred = gnb.predict(X_test)
cnf_matrix = confusion_matrix(y_test, y_pred)
p = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap="YlGnBu" ,fmt='g')
plt.title('Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')

